{"version":3,"sources":["hooks/useJsonFetch.jsx","components/Data.jsx","components/Error.jsx","components/Loading.jsx","App.js","reportWebVitals.js","index.js"],"names":["useJsonFetch","url","useState","data","setData","loading","setLoading","error","setError","useEffect","a","fetch","resp","json","ok","status","fetchData","Data","className","Error","Loading","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEe,SAASA,EAAaC,GAAM,IAAD,EACdC,mBAAS,IADK,mBAC/BC,EAD+B,KACzBC,EADyB,OAETF,oBAAS,GAFA,mBAE/BG,EAF+B,KAEvBC,EAFuB,OAGZJ,mBAAS,MAHG,mBAG/BK,EAH+B,KAGxBC,EAHwB,KA4BtC,OAvBAC,qBAAU,WACNL,EAAQ,IACO,uCAAG,8BAAAM,EAAA,sEAEVJ,GAAW,GAFD,SAGSK,MAAMV,GAHf,cAGJW,EAHI,gBAISA,EAAKC,OAJd,OAIJV,EAJI,OAKNS,EAAKE,IAELN,EAASI,EAAKG,OAAS,IAAMZ,EAAKY,QAEtCX,EAAQD,GACRG,GAAW,GAVD,kDAaVE,EAAS,EAAD,IACRF,GAAW,GAdD,0DAAH,oDAiBfU,KAEF,IAEK,CAACb,EAAME,EAASE,G,WC5BZ,SAASU,IAAO,MAEIjB,EAAa,4CAFjB,mBAEpBG,EAFoB,KAEdE,EAFc,UAG3B,OACI,qBAAKa,UAAU,OAAf,SACI,sBAAKA,UAAU,SAAf,UACCb,EAAU,aAAe,KACzBF,EAAKY,YCPH,SAASI,IAAQ,MAEGnB,EAAa,6CAFhB,mBAEfK,GAFe,WAENE,EAFM,KAI5B,OACI,qBAAKW,UAAU,QAAf,SACI,sBAAKA,UAAU,SAAf,UACCb,EAAU,aAAe,KACzBE,OCRE,SAASa,IAAU,MAECpB,EAAa,+CAFd,mBAEvBG,EAFuB,KAEjBE,EAFiB,UAI9B,OACI,sBAAKa,UAAU,UAAf,4BAEQ,sBAAKA,UAAU,SAAf,UACKb,EAAU,aAAe,KACzBF,EAAOA,EAAKY,OAAS,WCI3BM,MAVf,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,cAACD,EAAD,IACA,cAACE,EAAD,IACA,cAACC,EAAD,QCESE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3f8c0ca.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\n\nexport default function useJsonFetch(url) {\n    const [data, setData] = useState('');\n    const [loading,setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        setData('');\n        const fetchData = async() => {\n            try {\n                setLoading(true);\n                const resp = await fetch(url);\n                const data = await resp.json();\n                if(!resp.ok)\n                {\n                    setError(resp.status + ' ' + data.status);\n                }\n                setData(data);\n                setLoading(false);\n            }\n            catch (e) {\n                setError(e);\n                setLoading(false);\n            }\n        }\n        fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[])\n        \n    return [data, loading, error]\n}","import useJsonFetch from '../hooks/useJsonFetch';\n\nexport default function Data() {\n    // eslint-disable-next-line no-unused-vars\n    const [data, loading, error] = useJsonFetch('https://react8-2-back.herokuapp.com/data');\n    return (\n        <div className=\"Data\">\n            <div className=\"Result\">\n            {loading ? 'Loading...' : null}\n            {data.status}\n            </div>\n        </div>       \n    )\n}","import useJsonFetch from '../hooks/useJsonFetch';\n\nexport default function Error() {\n    // eslint-disable-next-line no-unused-vars\n    const [data, loading, error] = useJsonFetch('https://react8-2-back.herokuapp.com/error');\n\n    return (\n        <div className=\"Error\">\n            <div className=\"Result\">\n            {loading ? 'Loading...' : null}\n            {error}\n            </div>\n        </div>\n        \n    )\n}","import useJsonFetch from '../hooks/useJsonFetch';\n\nexport default function Loading() {\n    // eslint-disable-next-line no-unused-vars\n    const [data, loading, error] = useJsonFetch('https://react8-2-back.herokuapp.com/loading');\n\n    return (\n        <div className=\"Loading\">\n            Loading result:\n                <div className=\"Result\">\n                    {loading ? 'Loading...' : null}\n                    {data ? data.status : null}\n                </div>\n        </div>\n        \n    )\n}","import './App.css';\nimport Data from './components/Data';\nimport Error from './components/Error';\nimport Loading from './components/Loading';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Data />\n      <Error />\n      <Loading />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}